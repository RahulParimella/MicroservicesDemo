package com.microservice.rating.Service.Impl;

import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.exception.ResourceNotFoundException;
import com.microservice.rating.Repository.RatingRepository;
import com.microservice.rating.Service.RatingService;
import com.microservice.rating.dto.RatingDto;
import com.microservice.rating.entity.Rating;
@Service
public class RatingServiceImpl implements RatingService{
	
	@Autowired
	private RatingRepository RatingRepo;
	
	@Autowired
	private ModelMapper ratingMapper;
//
//	@Override
//	public Rating create(Rating rating) {
//		// TODO Auto-generated method stub
//		
//		return RatingRepo.save(rating) ;
//	}
//
//	@Override
//	public List<Rating> getRatings() {
//		// TODO Auto-generated method stub
//		return RatingRepo.findAll();
//	}
//
//	@Override
//	public List<Rating> getRatingByUserId(String userId) {
//		// TODO Auto-generated method stub
//		return RatingRepo.findByUserId(userId);
//	}
//
//	@Override
//	public List<Rating> getRatingByHotelId(String hotelId) {
//		// TODO Auto-generated method stub
//		return RatingRepo.findByHotelId(hotelId);
//	}

	@Override
	public RatingDto create(RatingDto ratingDto) {
		// TODO Auto-generated method stub
		Rating rating =ratingMapper.map(ratingDto, Rating.class);
		Rating saveRating =RatingRepo.save(rating);
		RatingDto addRatingDto =ratingMapper.map(saveRating, RatingDto.class);
		return addRatingDto;
	}

	@Override
	public RatingDto getRatingById(long ratingId) {
		// TODO Auto-generated method stub
		Optional<Rating> rating =RatingRepo.findById(ratingId);
		return ratingMapper.map(rating, RatingDto.class);
	}

	@Override
	public RatingDto getRatingByUserId(long userId) {
		// TODO Auto-generated method stub
		Optional<Rating> rating = RatingRepo.findById(userId);
		if(rating.isPresent()) {
			return ratingMapper.map(rating, RatingDto.class);
		}
		else {
			throw new ResourceNotFoundException("UserId", "userId", userId);
		}

	
	}

	@Override
	public RatingDto getRatingByHotelId(long hotelId) {
		Optional<Rating> rating =RatingRepo.findById(hotelId);
		if(rating.isPresent()) {
			return ratingMapper.map(rating, RatingDto.class);
		}
		else {
			throw new ResourceNotFoundException("HotelId","hotelid",hotelId);
		}
		

	}

}
